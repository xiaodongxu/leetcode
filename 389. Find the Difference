import java.util.*;
public class Solution {
    public char findTheDifference(String s, String t) {
        //first method, using array
        // int[] arrs = new int[26];
        // int[] arrt = new int[26];
        // for(char c:s.toCharArray())
        //     arrs[c-'a']++;
        // for(char c:t.toCharArray())
        //     arrt[c-'a']++;
        // for(int i=0;i<26;++i)
        // {
        //     if(arrs[i] != arrt[i])
        //         return (char)('a'+i );
        // }
        // return ' ';
        
        //second method, using ascii code
        // char[] arrays = s.toCharArray();
        // char[] arrayt = t.toCharArray();
        // int asciis = 0;
        // int asciit = 0;
        // for(int i=0;i<arrays.length;++i)
        //     asciis += (int)arrays[i];
        // for(int i=0;i<arrayt.length;++i)
        //     asciit += (int)arrayt[i];
        // return (char)(asciit-asciis);
        
        //third method, using comparison  -------------> turned out to be wrong answer, too naive
        // int i=0;
        // for(;i<s.length();i++)
        // {
        //     if(s.charAt(i) ==t.charAt(i) )
        //         continue;
        //     else
        //         return t.charAt(i);
        // }
        // int len = s.length();
        // return t.charAt(len);
        
        //fourth method, using hash table
       
        Map<Character,Integer> maps = new HashMap<>();
        Map<Character,Integer> mapt = new HashMap<>();
        for(char c:s.toCharArray())
            maps.put(c,maps.getOrDefault(c,0)+1 );
        for(char c:t.toCharArray())
            mapt.put(c,mapt.getOrDefault(c,0)+1 );
        
        
        for(char c:mapt.keySet())
        {
            if(!maps.containsKey(c) )
                return c;
            else
            {
                if(maps.get(c) != mapt.get(c) )
                    return c;
            }
        }
        return ' ';
        // Map<Character,Integer> maps = new HashMap<>();
        // for(char c:s.toCharArray())
        //     maps.put(c,maps.getOrDefault(c,0)+1);
        // for(char c:t.toCharArray() )
        // {
        //     if(maps.containsKey(c))
        //     {
        //       maps.put(c,maps.get(c)-1);
        //       if(maps.get(c)<0)
        //             return c;
        //     }
        //     else
        //         return c;
        // }
        // return ' ';
        
        //fifth method, using bit manipulation------------->which is pretty fast
        // String both = s+t;
        // char diffchar = 0;
        
        // for(char c: both.toCharArray())
        //     diffchar ^= c;
        // return diffchar;
        
    }
}
